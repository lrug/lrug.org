{
  "Matt Swanson": {
    "name": "Matt Swanson",
    "links": [
      "https://twitter.com/_swanson"
    ],
    "talks": [
      {
        "title": "StimulusJS: Modest JS for the HTML you have",
        "coverage": "{::coverage year=\"2020\" month=\"september\" talk=\"stimulusjs-modest-js-for-the-html-you-have\" /}",
        "summary": "An overview of [StimulusJS](https://stimulusjs.org) (a small framework from Basecamp) and\ndiscussion on when you might (or might not!) want to use it",
        "year": "2020",
        "month": "september"
      }
    ]
  },
  "Duncan Brown": {
    "name": "Duncan Brown",
    "links": [
      "https://github.com/duncanjbrown"
    ],
    "talks": [
      {
        "title": "Wizards without magic",
        "coverage": "{::coverage year=\"2020\" month=\"september\" talk=\"wizards-without-magic\" /}",
        "summary": "Multi-step forms (a.k.a wizards) are fiddly to build and difficult to\ntest. (And not just in Rails). Why is that, and how can we make them\nbetter?",
        "year": "2020",
        "month": "september"
      }
    ]
  },
  "Dan Moore": {
    "name": "Dan Moore",
    "links": [
      "https://twitter.com/mooreds"
    ],
    "talks": [
      {
        "title": "JWTs - what Rails developers need to know",
        "coverage": "{::coverage year=\"2020\" month=\"october\" talk=\"jwts-what-rails-developers-need-to-know\" /}",
        "summary": "What is a JSON Web Token (JWT) and why do you care? JWTs\nare a stateless, standardized way to represent user data. This talk will\ndiscuss why JWTs matter and the nuts and bolts of JWTs. We’ll also discuss\nhow you might use a JWT in your Rails or Ruby application.",
        "year": "2020",
        "month": "october"
      }
    ]
  },
  "Michael Mazour": {
    "name": "Michael Mazour",
    "links": [
      "https://www.linkedin.com/in/mmazour/"
    ],
    "talks": [
      {
        "title": "Getting Past the Tech Test",
        "coverage": "{::coverage year=\"2020\" month=\"october\" talk=\"getting-past-the-tech-test\" /}",
        "summary": "Sometimes people have great backgrounds and great skills, but have trouble\ngetting hired because they didn't approach the tech test the way the\ncompany wanted. As someone who reviews a lot of tech tests at work, I'm\ngoing to explain some of the unwritten rules and expectations that you\nmight not know if you've been out of circulation or are just entering the\njob market, and help you level up your tech test game.",
        "year": "2020",
        "month": "october"
      }
    ]
  },
  "Peter Bell": {
    "name": "Peter Bell",
    "links": [
      "https://github.com/trapeze-bell-peter"
    ],
    "talks": [
      {
        "title": "Comparing the speed and elegance of different computer languages using a Hamiltonian curve algorithm as the comparator",
        "coverage": "{::coverage year=\"2020\" month=\"may\" talk=\"comparing-the-speed-and-elegance-of-different-computer-languages\" /}",
        "summary": "My company (Trapeze) specialises in public transport including schedule\noptimisation. Finding Hamiltonian curves is a sub-problem to the\ntravelling salesman problem and of the general problem of optimising\npickup and drop-offs in demand responsive public transport. This talk\nwill compare implementing a Hamiltonian curve finder in a number of\ndifferent languages. The talk looks both at the speed of the language\nand the elegance. For Ruby, I compare a couple of different\nimplementations. Other languages that are compared are Elixir, Go,\nJavascript, Java, C++, C# and Python.\nThe source code is in a public Github repository details of which I will\nprovide as part of my talk",
        "year": "2020",
        "month": "may"
      }
    ]
  },
  "Sam Joseph": {
    "name": "Sam Joseph",
    "links": [
      "http://github.com/tansaku",
      "https://github.com/tansaku"
    ],
    "talks": [
      {
        "title": "Debugging Ruby HTTP Library Surprises",
        "coverage": "{::coverage year=\"2020\" month=\"may\" talk=\"debugging-ruby-http-library-surprises\" /}",
        "summary": "Some folks prefer 'puts' to debugging with something like\npry-byebug, but I'm a huge fan of debuggers, particularly stepping\nthrough my own code and the code of the many libraries we all rely on.\nIn combination with `bundle open` to insert breakpoints into the code of\ngems being used in your stack, debugging can expose really tricky\ndependency bugs, as I aim to demonstrate with one that I found in the\nway different ruby HTTP libraries can interact.",
        "year": "2020",
        "month": "may"
      },
      {
        "title": "Festive `CodeWarsJam`",
        "coverage": "{::coverage year=\"2015\" month=\"december\" talk=\"festive-codewarsjam\" /}",
        "summary": "A CodeWarsJam is a session where small teams of coders work on the same coding\nproblem together.  The problems are usually relatively simple and can be\nreviewed as a group every 20 minutes or so.  Recently at\n[MakersAcademy](http://www.makersacademy.com/) we've had great fun with\nCodeWarsJams, where we take coding kata from [http://codewars.com](http://codewars.com)\nand use them to run a CodeWarsJam.  CodeWarsJam is great because when you\nsolve a problem you get to see all the other variant solutions that others\nhave coded, sorted by popularity.  Come join the festive coding fun as LRUG's\nfirst CodeWarsJam!",
        "year": "2015",
        "month": "december"
      }
    ]
  },
  "Panos Matsinopoulos": {
    "name": "Panos Matsinopoulos",
    "links": [
      "http://www.linkedin.com/in/panayotismatsinopoulos"
    ],
    "talks": [
      {
        "title": "Hanami, another Opinionated Rack-based Framework",
        "coverage": "{::coverage year=\"2020\" month=\"june\" talk=\"hanami-another-opinionated-rack-based-framework\" /}",
        "summary": "We present Hanami and its differences to Rails. Then\nwe show an integration case between a Hanami and a Rails project. Finally,\nwe close with a PR on the Hanami project.",
        "year": "2020",
        "month": "june"
      }
    ]
  },
  "Alfredo Motta": {
    "name": "Alfredo Motta",
    "links": [
      "https://twitter.com/mottalrd"
    ],
    "talks": [
      {
        "title": "Agile or Waterfall; a risk management perspective",
        "coverage": "{::coverage year=\"2020\" month=\"june\" talk=\"agile-or-waterfall-a-risk-management-perspective\" /}",
        "summary": "Today Agile is the default choice for software development out there. Every\nconference, book, or blog post is telling us we are doomed to fail if we\ndon’t follow this established convention. But isn't it surprising to think\nthat Agile is advocated as the right methodology for every possible company\ndoing software out there? Are we going to organize software development\nexactly the same way if we are working for a startup, NASA, or FedEx? It\nseems hard to believe. In this presentation, I will explore the mental\nmodel to help you choose when you should (or sometimes should not) use\nAgile using the lenses of risk management. My goal is to provide guidance\nfor the puzzled business owner, project manager, or software developer who\nwants to pick what's right for their company or team.",
        "year": "2020",
        "month": "june"
      }
    ]
  },
  "Jolyon Pawlyn": {
    "name": "Jolyon Pawlyn",
    "links": [
      "https://twitter.com/jpawlyn"
    ],
    "talks": [
      {
        "title": "Improved security for password authentication",
        "coverage": "{::coverage year=\"2020\" month=\"july\" talk=\"improved-security-for-password-authentication\" /}",
        "summary": "Devise is a great authentication solution and is standard in many Rails\napplications. I want to look at 2 easy improvements to the default password\nvalidation. Then let's see what it takes to implement bare bones two-factor\nauthentication using Devise and Warden.\nThe security features to be covered can be viewed in [an example",
        "year": "2020",
        "month": "july"
      }
    ]
  },
  "Nicky Thompson": {
    "name": "Nicky Thompson",
    "links": [
      "https://twitter.com/knotnicky"
    ],
    "talks": [
      {
        "title": "Perfect is the enemy of good",
        "coverage": "{::coverage year=\"2020\" month=\"july\" talk=\"perfect-is-the-enemy-of-good\" /}",
        "summary": "This talk is a rambling rag-tag collection of software engineering and\nproblem-solving lessons learned over the course of *mumble* years as a\ndeveloper and now an engineering manager. It includes practical tips,\nphilosophical insights, or just advice that other people gave me that I\nfound helpful. These ideas have helped me be better at my job over the\nyears. They are tried and tested, things that I have actually done\nthroughout my career. They might or might not help you.",
        "year": "2020",
        "month": "july"
      }
    ]
  },
  "Matt Bee": {
    "name": "Matt Bee",
    "links": [
      "https://twitter.com/mattbee"
    ],
    "talks": [
      {
        "title": "Language doesn't matter: what makes a senior engineer?",
        "coverage": "{::coverage year=\"2020\" month=\"august\" talk=\"language-doesnt-matter-what-makes-a-senior-engineer\" /}",
        "summary": "What makes a senior engineer? What other aspects of\nbeing a senior engineer are as important, if not more important, than\nknowing a programming language inside out. What things can you work on to\nbecome or be a better senior engineer (that won't have a new framework out\nby next week!). This is a set of lessons learned in a journey from self\ntaught front end developer to senior polyglot developer (via ruby).",
        "year": "2020",
        "month": "august"
      }
    ]
  },
  "Chris Zetter": {
    "name": "Chris Zetter",
    "links": [
      "https://chriszetter.com"
    ],
    "talks": [
      {
        "title": "Doing the right thing",
        "coverage": "{::coverage year=\"2020\" month=\"august\" talk=\"doing-the-right-thing\" /}",
        "summary": "Ethics are the principles of right and wrong that govern\nour behaviour. Using examples from my experience, i'll share some tools\nthat you can use to understand ethical decisions and ways to help\nourselves and our team make the right choices.",
        "year": "2020",
        "month": "august"
      }
    ]
  },
  "Joel Chippindale": {
    "name": "Joel Chippindale",
    "links": [
      "https://twitter.com/joelchippindale",
      "http://blog.mocoso.co.uk/"
    ],
    "talks": [
      {
        "title": "How to take control of code quality",
        "coverage": "{::coverage year=\"2020\" month=\"april\" talk=\"how-to-take-control-of-code-quality\" /}",
        "summary": "We all know how valuable it is to keep the quality of your code high. Working on a high quality codebase is more enjoyable and enables us to deliver value much more effectively for our users and yet, time and again I hear engineers saying, “I am not allowed to spend sufficient time on code quality”.\nThis talk clarifies the value of maintaining a high quality codebase, gives you guidance on how to talk about this to help you get the support of your colleagues and managers for spending time on this and also outlines some key practices that will help you achieve this.",
        "year": "2020",
        "month": "april"
      },
      {
        "title": "Learning through blameless reviews",
        "coverage": "{::coverage year=\"2015\" month=\"september\" talk=\"learning-through-blameless-reviews\" /}",
        "summary": "In this talk I will outline some of the ways that teams react to the\nmistakes they make and how blameless reviews can help teams learn from\nthese mistakes",
        "year": "2015",
        "month": "september"
      },
      {
        "title": "Telling stories through your commits",
        "coverage": "{::coverage year=\"2015\" month=\"january\" talk=\"telling-stories-through-your-commits\" /}",
        "summary": "In this talk we'll look at some of the ways that you can\nimprove how you develop code and communicate with your team\nthrough your commits.",
        "year": "2015",
        "month": "january"
      },
      {
        "title": "My tests run faster than your tests",
        "coverage": "{::coverage year=\"2012\" month=\"december\" talk=\"hermes-add-wings-to-ruby-and-javascript-development\" /}",
        "summary": "An introduction to [Zeus](https://github.com/burke/zeus) and\nthe approach it takes for making rails tests run lightning fast.",
        "year": "2012",
        "month": "december"
      }
    ]
  },
  "Rob McKinnon": {
    "name": "Rob McKinnon",
    "links": [
      "https://github.com/robmckinnon"
    ],
    "talks": [
      {
        "title": "Music Experiments in Sonic Pi",
        "coverage": "{::coverage year=\"2020\" month=\"april\" talk=\"music-experiments-in-sonic-pi\" /}",
        "summary": "Let's celebrate Sonic Pi's v3.2 release, scheduled for 28 Feb!\nSonic Pi's an open source Ruby code-based music creation and performance tool.\nRob's presenting a few experiments in Sonic Pi, covering oddities such as:\n* negative melody\n* Jianpu (numbered musical notation)\n* just intonation\n* microtonal music - 19 EDO (Equal Division of the Octave)\n* interfacing with MIDI controllers over USB and bluetooth BLE.\nAlso Rob will walk us through a memory management improvement PR to Sonic Pi - that may have made it into the release.",
        "year": "2020",
        "month": "april"
      }
    ]
  },
  "Josh Hill": {
    "name": "Josh Hill",
    "links": [
      "https://twitter.com/jamesjoshuahill"
    ],
    "talks": [
      {
        "title": "Working together",
        "coverage": "{::coverage year=\"2016\" month=\"september\" talk=\"working-together\" /}",
        "summary": "Josh heard about pair programming a few years ago and tried it a few\ntimes. Last year, he jumped in and started pairing full-time. Working so\nclosely with clients, colleagues, juniors and seniors was challenging. Now he\nenjoys pairing more than flying solo and has seen the benefits for himself\nand his teammates. This talk is about the challenges and benefits of working\nmore closely with one another.",
        "year": "2016",
        "month": "september"
      }
    ]
  },
  "David Salgado": {
    "name": "David Salgado",
    "links": [
      "https://twitter.com/digitalronin"
    ],
    "talks": [
      {
        "title": "Total Rewrite",
        "coverage": "{::coverage year=\"2016\" month=\"september\" talk=\"total-rewrite\" /}",
        "summary": "Patterns and anti-patterns for when you're replacing your entire codebase,\nand reasons why doing that is (usually) a very bad idea.",
        "year": "2016",
        "month": "september"
      }
    ]
  },
  "Gerhard Lazu": {
    "name": "Gerhard Lazu",
    "links": [
      "https://twitter.com/gerhardlazu"
    ],
    "talks": [
      {
        "title": "Not working together",
        "coverage": "{::coverage year=\"2016\" month=\"september\" talk=\"not-working-together\" /}",
        "summary": "How does a small team spread across London & Omaha set up a global\nproduction infrastructure while not working together?",
        "year": "2016",
        "month": "september"
      }
    ]
  },
  "Charlie Egan": {
    "name": "Charlie Egan",
    "links": [
      "https://twitter.com/charlieegan3"
    ],
    "talks": [
      {
        "title": "Development Re-bundling in Dockerland",
        "coverage": "{::coverage year=\"2016\" month=\"october\" talk=\"development-re-bundling-in-dockerland\" /}",
        "summary": "For almost a year I've enjoyed using Docker and docker-compose to work on\nvarious Ruby projects. However - bundle installations when building images\nhave been always been painful. This talk is about exploring the rather\nunsatisfactory options available to speed up the process of \"development\nre-bundling\".",
        "year": "2016",
        "month": "october"
      }
    ]
  },
  "John Cinnamond": {
    "name": "John Cinnamond",
    "links": [
      "https://twitter.com/jcinnamond"
    ],
    "talks": [
      {
        "title": "The Art of Code Review",
        "coverage": "{::coverage year=\"2016\" month=\"may\" talk=\"the-art-of-code-review\" /}",
        "summary": "Most of us do some form of code review, increasingly often through pull\nrequests. Done well it can be a great tool for improving quality, sharing\nknowledge, and building a sense of cohesion in a team. Done badly it can be\ntoxic. In this talk I’d like to look at the motivations for code review,\nexamine research into its value, and suggest some practices on how to do it\nwell.",
        "year": "2016",
        "month": "may"
      },
      {
        "title": "Tell, Don’t Ask",
        "coverage": "{::coverage year=\"2016\" month=\"august\" talk=\"tell-don-t-ask\" /}",
        "summary": "Everything you ever need to know about how to write the most wonderful code, in 10 minutes.",
        "year": "2016",
        "month": "august"
      }
    ]
  },
  "Asfand Yar Qazi": {
    "name": "Asfand Yar Qazi",
    "links": [
      "http://www.thedevopsdoctors.com/"
    ],
    "talks": [
      {
        "title": "A Tale of Two Deployments - Machine Images, Immutable Servers And Green/Blue Deployment",
        "coverage": "{::coverage year=\"2016\" month=\"may\" talk=\"a-tale-of-two-deployments-machine-images-immutable-servers-and-green-blue-deployment\" /}",
        "summary": "Imagine some of the worst things that could happen to you during `cap deploy`\n-- well, they happened to Ali on the same day, and it turned into one of the\nworst days of his life. Interestingly, Sally in the office across the street\nhad the exact same issues come up during her deployment. However her team had\ninvested in their infrastructure sensibly, and deployed fresh immutable\nserver clusters from pre-built machine images on each deploy. She could just\nrelax, as the infrastructure had been designed to filter out most problems\nthat could occur during deployment. Here is their story!",
        "year": "2016",
        "month": "may"
      }
    ]
  },
  "Elixir": {
    "name": "Elixir",
    "links": [
      "http://elixir-lang.org/"
    ],
    "talks": [
      {
        "title": "Elixir for Rubyists",
        "coverage": "{::coverage year=\"2016\" month=\"march\" talk=\"elixir-for-rubyists\" /}",
        "summary": "The Elixir programming language  has been generating\na lot of buzz in the Ruby community recently. This presentation gives an\nintroduction to Elixir, discussing some of the things that make it so popular\namong rubyists, and outlining a few of the similarities and differences\nbetween Elixir and Ruby.",
        "year": "2016",
        "month": "march"
      }
    ]
  },
  "Redis": {
    "name": "Redis",
    "links": [
      "http://redis.io/"
    ],
    "talks": [
      {
        "title": "The full power of Redis",
        "coverage": "{::coverage year=\"2016\" month=\"march\" talk=\"the-full-power-of-redis\" /}",
        "summary": "The vast majority of projects use Redis like it's Memcached, but Redis can\ngive so much more. In this talk I'll give practical examples of use cases\nwhere Redis outshines everything else I've tried.",
        "year": "2016",
        "month": "march"
      }
    ]
  },
  "Codebar": {
    "name": "Codebar",
    "links": [
      "https://codebar.io/"
    ],
    "talks": [
      {
        "title": "A reintroduction to codebar",
        "coverage": "{::coverage year=\"2016\" month=\"march\" talk=\"a-reintroduction-to-codebar\" /}",
        "summary": "In this talk I will discuss what codebar is, how we have expanded over the\nlast 2 years and how you can help us improve.",
        "year": "2016",
        "month": "march"
      }
    ]
  },
  "Jo Pearce": {
    "name": "Jo Pearce",
    "links": [
      "https://twitter.com/jdpearce"
    ],
    "talks": [
      {
        "title": " Hacking Your Head : Managing Information Overload",
        "coverage": "{::coverage year=\"2016\" month=\"june\" talk=\"hacking-your-head-managing-information-overload\" /}",
        "summary": "There are limits to our ability to learn and process\ninformation. Overload impacts productivity by causing psychological\nand physiological stress. I’ll relate findings from cognitive\npsychology that help us understand how, as developers, we might be\noverloading ourselves and what to do about it.",
        "year": "2016",
        "month": "june"
      }
    ]
  },
  "Rob Kitromilides": {
    "name": "Rob Kitromilides",
    "links": [
      "https://twitter.com/robkitro"
    ],
    "talks": [
      {
        "title": "Open Sesame: A beginners guide to passwords",
        "coverage": "{::coverage year=\"2016\" month=\"june\" talk=\"open-sesame-a-beginners-guide-to-passwords\" /}",
        "summary": "What goes on when you log in to a website? How does it work? Why should\nyou care?",
        "year": "2016",
        "month": "june"
      }
    ]
  },
  "Tom Close": {
    "name": "Tom Close",
    "links": [
      "https://github.com/tomclose"
    ],
    "talks": [
      {
        "title": "Refactoring a monolith with rails engines",
        "coverage": "{::coverage year=\"2016\" month=\"june\" talk=\"refactoring-a-monolith-with-rails-engines\" /}",
        "summary": "12 months ago we were facing a number of problems familiar in an early\nstage startup:\n* a monolithic codebase that had accumulated a lot of technical debt\n* a requirement to handle complex business processes that were changing\n  quickly as the business scaled\n* a growing development team struggling to enable new hires to be effective\n  quickly\nWe initially considered moving to a micro-service architecture but eventually\nsettled on using rails engines to refactor our monolith, allowing us to make\nimmediate gains in productivity whilst avoiding the operational complexity of\na distributed system. The talk will cover the approach we are taking in this\n(ongoing) refactor, the rules we found we needed to play by, and the lessons\nwe learned along the way.",
        "year": "2016",
        "month": "june"
      }
    ]
  },
  "Ruby Book Club": {
    "name": "Ruby Book Club",
    "links": [
      "http://rubybookclub.com/"
    ],
    "talks": [
      {
        "title": "Ruby Book Club",
        "coverage": "{::coverage year=\"2016\" month=\"july\" talk=\"ruby-book-club\" /}",
        "summary": "Hello and welcome to the Ruby Book Club! We’re delighted that you could join\nus.\nToday we’re starting with section 4.9 in [Avdi Grimm’s ‘Confident\nRuby’](http://www.confidentruby.com/): Replace “string typing” with classes.\nAs always, it doesn’t matter if you haven’t found time to do the reading. At\nthe Ruby Book Club, we like to make sure that everyone is on the same page.",
        "year": "2016",
        "month": "july"
      }
    ]
  },
  "Tom Kadwill": {
    "name": "Tom Kadwill",
    "links": [
      "https://twitter.com/tomkadwill"
    ],
    "talks": [
      {
        "title": "Documenting Ruby APIs",
        "coverage": "{::coverage year=\"2016\" month=\"july\" talk=\"documenting-ruby-apis\" /}",
        "summary": "In this talk I will provide a short comparison of the popular API\ndocumentation tools available for Ruby. I'll explain how you can use them to\ngenerate API documentation for your own projects.",
        "year": "2016",
        "month": "july"
      }
    ]
  },
  "Edd Sowden": {
    "name": "Edd Sowden",
    "links": [
      "https://twitter.com/edds"
    ],
    "talks": [
      {
        "title": "Integrating React into a Rails application",
        "coverage": "{::coverage year=\"2016\" month=\"july\" talk=\"integrating-react-into-a-rails-application\" /}",
        "summary": "Looking at how you can start using [React](https://facebook.github.io/react/)\nwithin a Rails environment, why you might want to, and what benefits it can\nunlock. Also looking at how you can make this change to a large project which\nlots of developers contribute to regularly.",
        "year": "2016",
        "month": "july"
      }
    ]
  },
  "Quill Content": {
    "name": "Quill Content",
    "links": [
      "http://www.quillcontent.com/"
    ],
    "talks": [
      {
        "title": "From monolith to microservices: A true story",
        "coverage": "{::coverage year=\"2016\" month=\"january\" talk=\"from-monolith-to-microservices-a-true-story\" /}",
        "summary": "How we moved from a huge Rails monolith to small microservices - the how and\nthe why.",
        "year": "2016",
        "month": "january"
      }
    ]
  },
  "Primed.is": {
    "name": "Primed.is",
    "links": [
      "http://primed.is"
    ],
    "talks": [
      {
        "title": "The journey to Primed.is",
        "coverage": "{::coverage year=\"2016\" month=\"january\" talk=\"the-journey-to-primed-is\" /}",
        "summary": "Primed.is - improving recruitment pain\nRecruitment is a pain, isn't it? Does it have to be this way? We say\n'no' and we want to show you why. Primed.is a web application to\ntackle common recruitment problems and we can't wait to tell you all\nabout it.\nA Guide to Becoming a Ruby on Rails Developer\nAfter working as a Flash developer and team lead for 10 years I have\nswitched to become a Ruby on Rails developer to build our new product,\nPrimed. This is the talk I would like to have heard a year ago when I\nwas beginning that journey.",
        "year": "2016",
        "month": "january"
      }
    ]
  },
  "Jonas Pfenniger Chevalier": {
    "name": "Jonas Pfenniger Chevalier",
    "links": [
      "http://zimbatm.com"
    ],
    "talks": [
      {
        "title": "Using direnv with ruby and 12factor apps",
        "coverage": "{::coverage year=\"2016\" month=\"january\" talk=\"using-direnv-with-ruby-and-12factor-apps\" /}",
        "summary": "[direnv](http://direnv.net) is a language-agnostic environment switching tool\nthat I wrote a 5 years ago and still use every day.\nThis talk is going to present the tool and it's capabilities, and then explore\nhow it can be used by ruby developers. Hopefully it will be useful to you in\nthe everyday life as a developer, or just spark some interesting\nconversations.",
        "year": "2016",
        "month": "january"
      }
    ]
  },
  "Jairo Diaz": {
    "name": "Jairo Diaz",
    "links": [
      "https://codescrum.com",
      "https://twitter.com/codescrum",
      "http://www.codescrum.com/",
      "http://www.codescrum.com"
    ],
    "talks": [
      {
        "title": "Action Cable",
        "coverage": "{::coverage year=\"2016\" month=\"august\" talk=\"action-cable\" /}",
        "summary": "[Action Cable](https://github.com/rails/rails/tree/master/actioncable) is a\nRails framework for real-time communication over websockets introduced in\nRails 5.0. With Action Cable we can develop interactive applications and live\nnotifications to our users.",
        "year": "2016",
        "month": "august"
      },
      {
        "title": "Containers Patterns for Rails",
        "coverage": "{::coverage year=\"2015\" month=\"september\" talk=\"containers-patterns-for-rails\" /}",
        "summary": "In this talk we explore how to use docker containers to run ruby on\nrails applications.  Rails applications usually require several\ndifferent components such as Nginx, Redis, MySQL, Mongo and background\njobs. We will show how to set up and manage the configuration of these\nelements.",
        "year": "2015",
        "month": "september"
      },
      {
        "title": "[Bebox](https://github.com/codescrum/bebox) - Convention over configuration for puppet repositories",
        "coverage": "{::coverage year=\"2014\" month=\"september\" talk=\"bebox-convention-over-configuration-for-puppet-repositories\" /}",
        "summary": "Bebox helps automating the provisioning of environments in which\nRuby on Rails applications run, easing the reproduction of new\nserver setups every time.\nBebox's main concern is the structure. It is generally a good\nidea to have conventions about how different source code files\nare placed and named and be able to use this to reduce the\ndetails required to understand a project while also providing\nautomation in key places. These conventions may include things\nlike: how to write puppet modules, how to integrate them into\nthe projects, a directory structure for the projects, how to\nhave a replicated “development/test” environment into virtual\nmachines, etc.",
        "year": "2014",
        "month": "september"
      },
      {
        "title": "Application Example based on Gov.uk public code",
        "coverage": "{::coverage year=\"2013\" month=\"june\" talk=\"application-example-based-on-gov-uk-public-code\" /}",
        "summary": "This talk describes an experience of reusing the public code\navailable from the [GOV.UK project](https://www.gov.uk). It\nshows how we can implement custom customer service flows\nbased on the [SmartAnswers project](https://github.com/alphagov/smart-answers).",
        "year": "2013",
        "month": "june"
      },
      {
        "title": "Zero-Downtime Deployment",
        "coverage": "{::coverage year=\"2012\" month=\"september\" talk=\"zero-downtime-deployment\" /}",
        "summary": "A zero-downtime deployment configuration is important for\ncritical systems that need to handle every request (i.e.\nfinancial system) and lately for systems following\ncontinuous delivery  principles since there could be many\nfrequent deployments .  This talks present a simple\nconfiguration for zero-downtime deployments for ruby\napplications.",
        "year": "2012",
        "month": "september"
      }
    ]
  },
  "Melinda Seckington": {
    "name": "Melinda Seckington",
    "links": [
      "https://missgeeky.com",
      "https://missgeeky.com/"
    ],
    "talks": [
      {
        "title": "The Marvel Guide to Developers",
        "coverage": "{::coverage year=\"2016\" month=\"august\" talk=\"the-marvel-guide-to-developers\" /}",
        "summary": "Forget ninja developers and rockstar developers. What I'm more interested in\nis the superhero developer: these are the developers that do their best to\nhelp others, that try to give back to their community, and generally make the\nworld a better place.\nSo how can we all strive to be superhero developers? Using the origin stories\nand lessons from Marvel superheroes, this talk will help you become the type\nof developer that amplifies and helps others.",
        "year": "2016",
        "month": "august"
      },
      {
        "title": "Un-artificial Intelligence: How People Learn",
        "coverage": "{::coverage year=\"2015\" month=\"april\" talk=\"un-artificial-intelligence-how-people-learn\" /}",
        "summary": "Most developers are familiar with the basics of AI: how do you make a\ncomputer, an algorithm, a system learn something? What most don't\nrealize though is that the same principles are applied to people. This\ntalk looks at the theory behind how people learn, and maps it to real\nlife examples of how specifically developers learn.",
        "year": "2015",
        "month": "april"
      }
    ]
  },
  "Dr Chris Seaton": {
    "name": "Dr Chris Seaton",
    "links": [
      "http://chrisseaton.com/"
    ],
    "talks": [
      {
        "title": "JRuby+Truffle: A faster but simpler new Ruby",
        "coverage": "{::coverage year=\"2016\" month=\"april\" talk=\"jruby-truffle-a-faster-but-simpler-new-ruby\" /}",
        "summary": "JRuby+Truffle is a new Ruby interpreter from Oracle Labs. While it uses\ncutting-edge compiler technology to achieve high performance, the concepts\nand implementation of most of JRuby+Truffle are actually rather simple -\nsimpler than MRI, JRuby or Rubinius, and needing only techniques that can be\nexplained in a few slides.",
        "year": "2016",
        "month": "april"
      }
    ]
  },
  "Jonny Arnold": {
    "name": "Jonny Arnold",
    "links": [
      "https://twitter.com/JonnyArnold89"
    ],
    "talks": [
      {
        "title": "Doing Things Differently at Reevoo",
        "coverage": "{::coverage year=\"2016\" month=\"april\" talk=\"doing-things-differently-at-reevoo\" /}",
        "summary": "Reevoo is already an Agile company: we have JIRA Agile, so we must be, right?\nA few months ago we set out on a greenfield project, and decided to do things\ndifferently. What would happen when we went back to sticky notes and\nwhiteboards for planning? Could we deliver on time for a project if we never\nset a deadline? And what happens when half of the development team changes\nevery two weeks? Come along to our public retrospective on what went well and\nwhat we would never do again.",
        "year": "2016",
        "month": "april"
      }
    ]
  },
  "Chris Blackburn": {
    "name": "Chris Blackburn",
    "links": [
      "https://twitter.com/burgersnatch"
    ],
    "talks": [
      {
        "title": "Continuous Feedback",
        "coverage": "{::coverage year=\"2016\" month=\"april\" talk=\"continuous-feedback\" /}",
        "summary": "How we left behind old-fashioned performance reviews by applying the things\nwe're taught to value in modern software delivery to our people.",
        "year": "2016",
        "month": "april"
      }
    ]
  },
  "Tatiana Soukiassian": {
    "name": "Tatiana Soukiassian",
    "links": [
      "https://twitter.com/binaryberry"
    ],
    "talks": [
      {
        "title": "A pull request slackbot : the seal",
        "coverage": "{::coverage year=\"2015\" month=\"september\" talk=\"a-pull-request-slackbot-the-seal\" /}",
        "summary": "As part of my 20% project at GDS, I developed a Slackbot that reminds\ndevelopers of their team's pull requests that are awaiting review. I\nwill talk about why and how [the seal](https://github.com/binaryberry/seal/)\nwas built, and what I learned from building it.",
        "year": "2015",
        "month": "september"
      }
    ]
  },
  "Dom Baggott": {
    "name": "Dom Baggott",
    "links": [
      "https://twitter.com/evilstreak"
    ],
    "talks": [
      {
        "title": "Debugging and fixing performance issues with the mustache gem and partials",
        "coverage": "{::coverage year=\"2015\" month=\"october\" talk=\"debugging-and-fixing-performance-issues-with-the-mustache-gem-and-partials\" /}",
        "summary": "A quick blast through encountering a feature with performance in the\nmustache gem. How we debugged it and how we fixed it. This talk will be\na bit less boring than it sounds.",
        "year": "2015",
        "month": "october"
      }
    ]
  },
  "Jonas Huckestein": {
    "name": "Jonas Huckestein",
    "links": [
      "https://twitter.com/jonas"
    ],
    "talks": [
      {
        "title": "API-first banking",
        "coverage": "{::coverage year=\"2015\" month=\"october\" talk=\"api-first-banking\" /}",
        "summary": "What would you build on top of your bank if it had a REST API & Webhooks? At Mondo, we're looking forward to finding out. Our API (plus Ruby client library) is in beta ([docs here](https://getmondo.co.uk/docs/)), and we hosted our first hackathon a couple of weeks ago. Come along to find out what people built!",
        "year": "2015",
        "month": "october"
      }
    ]
  },
  "Stanisław Klajn": {
    "name": "Stanisław Klajn",
    "links": [
      "http://stackoverflow.com/users/2336231/broisatse"
    ],
    "talks": [
      {
        "title": "ActiveRecord vs N+1",
        "coverage": "{::coverage year=\"2015\" month=\"october\" talk=\"activerecord-vs-n-1\" /}",
        "summary": "In this talk would like to focus on dealing with N+1: how to detect it,\nhow to get rid of it and, most importantly, how to avoid it.",
        "year": "2015",
        "month": "october"
      }
    ]
  },
  "Scott Matthewman": {
    "name": "Scott Matthewman",
    "links": [
      "https://twitter.com/scottm"
    ],
    "talks": [
      {
        "title": "Hack like a journalist",
        "coverage": "{::coverage year=\"2015\" month=\"november\" talk=\"hack-like-a-journalist\" /}",
        "summary": "News reporters are trained in techniques to produce stories that are concise,\nwell structured, easy to follow and with a consistent house style. How can\nthose same techniques help us write better code?",
        "year": "2015",
        "month": "november"
      }
    ]
  },
  "Lorenzo Barasti": {
    "name": "Lorenzo Barasti",
    "links": [
      "https://www.linkedin.com/pub/lorenzo-barasti/5a/918/685"
    ],
    "talks": [
      {
        "title": "Leveraging immutability in Ruby",
        "coverage": "{::coverage year=\"2015\" month=\"november\" talk=\"leveraging-immutability-in-ruby\" /}",
        "summary": "Why should we care about using immutable objects in our code? What does\nfunctional programming have to do with immutability? How do we approach\nimmutability when the frameworks and libraries we use seem to go a different\ndirection?\nWe'll try to answer these questions by looking at the ideas behind the\nimplementation of some immutable data structure.",
        "year": "2015",
        "month": "november"
      }
    ]
  },
  "Simon Sharville": {
    "name": "Simon Sharville",
    "links": [
      "http://www.simonsharville.co.uk/"
    ],
    "talks": [
      {
        "title": "No-Man’s Land - Finding peace at the border of art and tech",
        "coverage": "{::coverage year=\"2015\" month=\"november\" talk=\"no-man-s-land-finding-peace-at-the-border-of-art-and-tech\" /}",
        "summary": "However good the underlying tech, ugly applications discourage users, pretty\nones will attract them. A gulf exists between the artists and the technicians\nwho need to bring those designs to life. Co-presented by a graphic designer\nand a developer, we’ll discuss our approach to keeping both artists and\ntechnicians within their comfort zone to create applications that work well\nAND look good.",
        "year": "2015",
        "month": "november"
      }
    ]
  },
  "Sabrina Leandro": {
    "name": "Sabrina Leandro",
    "links": [
      "http://saleandro.com/"
    ],
    "talks": [
      {
        "title": "Rewriting Code and Culture",
        "coverage": "{::coverage year=\"2015\" month=\"may\" talk=\"rewriting-code-and-culture\" /}",
        "summary": "This is the story of a company that survived a much needed\ntransformation of its product and codebase, but most importantly, of\nits culture. There's no real prescription for being agile. It's about\nthe journey a team takes to discover how to best work together and\ndeliver great products.\nIn this presentation, I'll share a candid view of a team trying to\novercome a slow product development process. How we refactored our way\nout of badly coupled code, moved to continuous deployment, and greatly\nimproved our approach to product and software development.",
        "year": "2015",
        "month": "may"
      }
    ]
  },
  "Paul Mucur": {
    "name": "Paul Mucur",
    "links": [
      "http://mudge.name/",
      "http://mudge.name"
    ],
    "talks": [
      {
        "title": "Exploring #to_proc",
        "coverage": "{::coverage year=\"2015\" month=\"march\" talk=\"exploring-to-proc\" /}",
        "summary": "A look at how some \"odd syntax\" [introduced in Rails 1.1](https://github.com/rails/rails/commit/69bf71f5e9b537f88acc0d4492a057336e7305d1) and\nthen [added to Ruby itself](https://github.com/ruby/ruby/commit/ac4d6ddfa3219c212d2865ed600a0ab568d5f0b5) might not solely be for the sake of\nconvenience but hint at a more powerful idea seen in other\nprogramming languages.",
        "year": "2015",
        "month": "march"
      },
      {
        "title": "Managing Web Application Servers with Puppet",
        "coverage": "{::coverage year=\"2011\" month=\"august\" talk=\"managing-web-application-servers-with-puppet\" /}",
        "summary": "Joshua Sierles of 37signals once described configuration management as\nsomething that [\"doesn't sound sexy, but it's the single most important\nthing we do as sysadmins\"](http://37signals.com/svn/posts/1872-nuts-bolts-configuration-management-with-chef)\nbut what is it and what do tools like\nChef and Puppet offer from the point of view of a developer?\nIn this presentation I want to talk about how configuration management\nallowed me -- a developer with no access to the live servers and\nworking with system administrators in a different time zone -- to not\nonly install and configure servers quickly and in a repeatable way but\nalso let me be confident about the consistency of each and every\nmachine I deploy to.\nUsing the example of getting a server ready to run a Rails application\nusing [Puppet](http://www.puppetlabs.com/) (and testing things out with the aid of [Vagrant](http://vagrantup.com/)), I will\nshowcase some patterns that we have developed for managing versions of\nRuby with RVM, the installation of Phusion Passenger and how to deploy\na database.yml when you're not allowed to see live passwords.",
        "year": "2011",
        "month": "august"
      }
    ]
  },
  "Garry Shutler": {
    "name": "Garry Shutler",
    "links": [
      "http://gshutler.com"
    ],
    "talks": [
      {
        "title": "Redis is the answer, what's the question?",
        "coverage": "{::coverage year=\"2015\" month=\"june\" talk=\"redis-is-the-answer-what-s-the-question\" /}",
        "summary": "There are very few things that are part of my go-to toolbox, but Redis\nis one of those things. I don't think there's a better, more flexible\npiece of infrastructure you can have at your disposal.\nI'll cover the very basics of using Redis and general patterns that you\ncan use within your own systems. I'll also share some concrete examples\nof what we've used it for at Cronofy.",
        "year": "2015",
        "month": "june"
      }
    ]
  },
  "Simon Coffey": {
    "name": "Simon Coffey",
    "links": [
      "https://twitter.com/urbanautomaton"
    ],
    "talks": [
      {
        "title": "Test Bisection with RSpec",
        "coverage": "{::coverage year=\"2015\" month=\"june\" talk=\"test-bisection-with-rspec\" /}",
        "summary": "I'll talk about a useful technique for debugging order-dependent test\nfailures, and introduce an upcoming feature in RSpec that automates it.",
        "year": "2015",
        "month": "june"
      },
      {
        "title": "The reluctant Chef",
        "coverage": "{::coverage year=\"2013\" month=\"july\" talk=\"the-reluctant-chef\" /}",
        "summary": "Most developers don't do ops, and though the idea of devops\nis slowly permeating through the industry, it's probably\nnot the norm yet. So why should we, as devs, care about\nconfiguration management? What has it done for us lately?\nI'll try to explain how Chef can improve your life, even if\nyou never touch a production server. I'll give some\nexamples of ways in which configuration management can\nsimplify your development environment, improve your\ndebugging abilities, and give you a better overall\nunderstanding of the way your applications fit together.\nI'll also share some strategies for breaking down the\nintimidating task of introducing Chef if you've already got\nhand-configured servers, so that change can be gradual,\nwith progress along the way as nature intended. I'll also\nmention some of the tools that make life much, much simpler.",
        "year": "2013",
        "month": "july"
      }
    ]
  },
  "Robbie Clutton": {
    "name": "Robbie Clutton",
    "links": [
      "https://twitter.com/robb1e"
    ],
    "talks": [
      {
        "title": "Who’s afraid of database views?",
        "coverage": "{::coverage year=\"2015\" month=\"january\" talk=\"who-s-afraid-of-database-views\" /}",
        "summary": "Many Rails codebases I look at work hard to put all logic into\nthe application source code, using the database only a dumb\nstore. But, there are circumstances where it makes sense to\nleverage features of a database and in this talk I'll cover one\nof those features in Views. I'll walk through examples of why you\nmight want logic in two places, how views compare to caching\nfor performance considerations, using views as a facade on\nlegacy tables and how to test views alongside your application.",
        "year": "2015",
        "month": "january"
      }
    ]
  },
  "Tom Cartwright": {
    "name": "Tom Cartwright",
    "links": [
      "http://www.tomcartwright.net/"
    ],
    "talks": [
      {
        "title": "PeerConnect all the things",
        "coverage": "{::coverage year=\"2015\" month=\"january\" talk=\"peerconnect-all-the-things\" /}",
        "summary": "[WebRTC](http://www.webrtc.org/) is an exciting technology currently in, or coming\nsoon to a browser near you. In this talk I will explain what\nit is, how it works and how to setup some ruby services to\nsupport a WebRTC-based application.",
        "year": "2015",
        "month": "january"
      }
    ]
  },
  "Tom Stuart": {
    "name": "Tom Stuart",
    "links": [
      "http://codon.com",
      "http://codon.com/",
      "http://tomstuart.co.uk/"
    ],
    "talks": [
      {
        "title": "Hello, declarative world",
        "coverage": "{::coverage year=\"2015\" month=\"august\" talk=\"hello-declarative-world\" /}",
        "summary": "Ruby’s billed as a “multi-paradigm” language, but, let’s face it, we\nuse it to write imperative object-oriented programs. I'm interested in\ndifferent ways of programming computers, because I reckon imperative\nprograms are far too low-level and overspecified, which is why as a\nspecies we're generally terrible at writing them. In this talk I want\nto encourage you to think outside of your normal programming habits;\nI’ll present a more abstract and declarative style called relational\nprogramming, and show you how to implement a minimal relational\nlanguage in Ruby. (Dog whistle: this is [μkanren](http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf).)",
        "year": "2015",
        "month": "august"
      },
      {
        "title": "Welcome back to RSpec",
        "coverage": "{::coverage year=\"2014\" month=\"july\" talk=\"welcome-back-to-rspec\" /}",
        "summary": "[RSpec 3](https://relishapp.com/rspec/) has just been released, and it's come a long way since\n[version 1](http://rspec.info). If you've had problems with RSpec in the past, now\nis a great time to revisit it — it's become much cleaner, simpler\nand more focused. I'll give a quick overview of the main things\nthat have changed over the years, and if there's time, I'll\nexplain a few of the new features in version 3.",
        "year": "2014",
        "month": "july"
      },
      {
        "title": "Dependency Injection, the Dependency Inversion Principle, and You",
        "coverage": "{::coverage year=\"2012\" month=\"may\" talk=\"dependency-injection-the-dependency-inversion-principle-and-you\" /}",
        "summary": "It's received wisdom that Ruby doesn't need dependency injection\nframeworks. In this talk, I'll claim that this is at least in\npart because we don't apply the [Dependency Inversion Principle](http://www.objectmentor.com/resources/articles/dip.pdf)\nproperly. I'll explore the intent of the principle, its benefits\nfor maintainable and testable code, and show how to improve\nexisting code through its application.\nI'll then go on to explore how to create objects with dependencies\nwired in, hoping to settle the question of whether we need a framework to do this.",
        "year": "2012",
        "month": "may"
      }
    ]
  },
  "Chris Patuzzo": {
    "name": "Chris Patuzzo",
    "links": [
      "https://github.com/tuzz"
    ],
    "talks": [
      {
        "title": "Domain Driven Design, In the Wild",
        "coverage": "{::coverage year=\"2015\" month=\"august\" talk=\"domain-driven-design-in-the-wild\" /}",
        "summary": "Every day, we write software that solves business problems. How we\nactually do that is largely up to us. We tend to build models that\nencapsulate complexity and provide abstractions that help us reason\nabout the problems we solve.\nWe stress our models with incremental development. Changing business\nrequirements challenge the durability of our models. The magnitude of\nchange is an indicator for the effectiveness of our models' ability to\nrepresent the problem domain.\nAt [Which?](https://github.com/whichdigital) we used [Domain Driven\nDesign](https://en.wikipedia.org/wiki/Domain-driven_design) to deliver\nour most recent project. In this talk, I will share those insights. I\naim to cut through the jargon and give concrete, real-world examples of\nhow we applied the principles of DDD to build a product that\nanticipates change.",
        "year": "2015",
        "month": "august"
      }
    ]
  },
  "Emily Stolfo": {
    "name": "Emily Stolfo",
    "links": [
      "https://twitter.com/emstolfo"
    ],
    "talks": [
      {
        "title": "The shiny new mongo gem",
        "coverage": "{::coverage year=\"2015\" month=\"april\" talk=\"the-new-mongodb-ruby-driver-2-0\" /}",
        "summary": "The Ruby team at MongoDB spent the last year building a new driver\n-- [the mongo gem](https://github.com/mongodb/mongo-ruby-driver) --\nthat was released a few weeks ago. Emily is going to talk about how\nthey built the driver, its design, and why its availability is\nso exciting for the Rails and Ruby community.\nFor reference, an article announcing the release: [shar.es/1g0PFK](http://shar.es/1g0PFK)\n[MongoDB 3.0](http://docs.mongodb.org/manual/release-notes/3.0/) was also released a few weeks ago and she'll talk a bit\nabout what makes this version so monumental and why you should try\nit out.",
        "year": "2015",
        "month": "april"
      }
    ]
  },
  "Mazz Mosley": {
    "name": "Mazz Mosley",
    "links": [
      "http://houseofmnowster.com/"
    ],
    "talks": [
      {
        "title": "How not to become a terrible human being once you get a leadership title.",
        "coverage": "{::coverage year=\"2014\" month=\"september\" talk=\"how-not-to-become-a-terrible-human-being-once-you-get-a-leadership-title\" /}",
        "summary": "You'll never guess what happens next? Mazz will talk about some\nof the essential skills that good technical leaders exhibit and\nthe information you need to know about to help you become good\nat leading and not turn into a terrible person. Do you find\nyourself in a position of leadership and don't know what to do\nnow? Do you think you're a great tech lead? Do you wonder if\nyou're cut out to lead one day? Great, then come and listen to\nmy talk, you may find it more relevant to your interests than\nyou realise.",
        "year": "2014",
        "month": "september"
      }
    ]
  },
  "Daniel Sun": {
    "name": "Daniel Sun",
    "links": [
      "http://danielsun.co.uk/"
    ],
    "talks": [
      {
        "title": "Learn to code in 12 weeks?",
        "coverage": "{::coverage year=\"2014\" month=\"september\" talk=\"learn-to-code-in-12-weeks\" /}",
        "summary": "Having recently completed the training phase of WeGotCoders I\nwill present some code from [my final project](https://github.com/dan-mi-sun/the-soul-at-work) of the 12 week\ntraining course / some code recently pulled into [Diaspora*](https://www.joindiaspora.com/).\nWith more and more of us choosing this route, the aim is to\nshow those interested in the 'Immersion' model (either\nattending a course, or hiring someone who has joined a course)\nwhat someone with no prior coding experience can achieve\nwithin 12 weeks.",
        "year": "2014",
        "month": "september"
      }
    ]
  },
  "Rob Miller": {
    "name": "Rob Miller",
    "links": [
      "https://robm.me.uk/"
    ],
    "talks": [
      {
        "title": "Be a good UNIX citizen",
        "coverage": "{::coverage year=\"2014\" month=\"october\" talk=\"be-a-good-unix-citizen\" /}",
        "summary": "The Unix command line has been the foundation of how\nwe use computers for over four decades, and has\nchanged surprisingly little in that time. I'll look at\nwhat it takes to elevate a throwaway one-liner or\npersonal script into a robust and re-usable CLI app,\nand look at the Ruby techniques that make it easy to\nbe a good Unix citizen.",
        "year": "2014",
        "month": "october"
      }
    ]
  },
  "Xavier Riley": {
    "name": "Xavier Riley",
    "links": [
      "http://xavierriley.co.uk/"
    ],
    "talks": [
      {
        "title": "Live Coding in the Classroom",
        "coverage": "{::coverage year=\"2014\" month=\"october\" talk=\"live-coding-in-the-classroom\" /}",
        "summary": "[Sonic Pi](http://sonic-pi.net/) is a Ruby-based live coding music\nsynthesiser designed to help teach both computing\nand music within schools. It uses fast feedback,\nliveness and studio-quality sound production as a\nmeans to engage school children in introductory\ncoding. In this talk we will follow the story of\nSonic Pi from its the humble beginnings of this\nproject in a single class of school-children coding\nbeeps and bleeps to its current standing as a\nstate-of-the-art live coding system installed by\ndefault on all Raspberry Pis  used to live code\nin a variety of venues from Algoraves to national\nmusic venues.  All towards a simple but deep\nquestion - how can we give more people an understanding\nof what programming is and can do?",
        "year": "2014",
        "month": "october"
      }
    ]
  },
  "Funding Circle Code Craft": {
    "name": "Funding Circle Code Craft",
    "links": [
      "http://tech.fundingcircle.com/codecraft/"
    ],
    "talks": [
      {
        "title": "Learning to Code",
        "coverage": "{::coverage year=\"2014\" month=\"may\" talk=\"learning-to-code\" /}",
        "summary": "It'll be about my adventures, frustrations and triumphs in learning to code and specifically in Ruby.",
        "year": "2014",
        "month": "may"
      }
    ]
  },
  "Adam Rogers": {
    "name": "Adam Rogers",
    "links": [
      "https://twitter.com/rodreegez"
    ],
    "talks": [
      {
        "title": "How to win developers and influence designers",
        "coverage": "{::coverage year=\"2014\" month=\"may\" talk=\"how-to-win-developers-and-influence-designers\" /}",
        "summary": "In 1936, Dale Carnegie wrote the book [\"How to win friends and influence people\"](http://www.amazon.co.uk/How-Win-Friends-Influence-People/dp/0091906814/).\nYou may have heard of it. But what can this book, and others, teach us about\nworking as part of a software team today? Quite a lot, actually.\nWe'll look at a few points that'll help us to work better, together.",
        "year": "2014",
        "month": "may"
      }
    ]
  },
  "Gabe da Silveira": {
    "name": "Gabe da Silveira",
    "links": [
      "https://twitter.com/dasil003"
    ],
    "talks": [
      {
        "title": "Deprecating ActiveResource: Alternative Approaches for Internal Rails Services",
        "coverage": "{::coverage year=\"2014\" month=\"may\" talk=\"deprecating-activeresource-alternative-approaches-for-internal-rails-services\" /}",
        "summary": "Ruby on Rails has always been optimized for a single monolithic application\narchitecture.  But as applications grow, it has become more and more common\nfor architects to seek out ways to break their monolithic Rails apps into\nself-contained services.  For years the most natural answer of how to hook\nup one Rails app to another's API has been to use ActiveResource, a core\nRails plugin that provides an ActiveRecord-like interface to an external service.\nThe allure of such a simple interface to a network service is undeniable, but\nthe downsides not nearly as obvious.  Many have built Rails apps relying on\nActiveResource only to feel significant unforeseen pain down the line.  This\ntalk provides a case study of an early adopter of ActiveResource during the\nRails 1.2 era, the pain that it led to, and the eventual replacement of\nActiveResource with a bespoke private gem that provides a similar, but more\nrobust interface.",
        "year": "2014",
        "month": "may"
      }
    ]
  },
  "Andrew Appleton": {
    "name": "Andrew Appleton",
    "links": [
      "https://twitter.com/appltn"
    ],
    "talks": [
      {
        "title": "Rage against the state machine",
        "coverage": "{::coverage year=\"2014\" month=\"march\" talk=\"rage-against-the-state-machine\" /}",
        "summary": "A story about the problems we faced modelling state and\nrecording state changes at [GoCardless](https://gocardless.com/blog/) and how we\ngeneralised our solution to those problems into a new\ngem, [Statesman](https://github.com/gocardless/statesman).",
        "year": "2014",
        "month": "march"
      }
    ]
  },
  "eBench": {
    "name": "eBench",
    "links": [
      "http://www.eBench.com"
    ],
    "talks": [
      {
        "title": "Marketing for Developers",
        "coverage": "{::coverage year=\"2014\" month=\"march\" talk=\"marketing-for-developers\" /}",
        "summary": "I’m a relative newcomer to Ruby, but I’ve got lots of experience in\nmarketing.\nOver the last two years I’ve spoken to many experienced devs about\ntheir marketing challenges, and witnessed how simple marketing\nmistakes can derail a project.\nIn the consumer goods industry marketing is a discipline, with\nstructured ways of working through it.   I will demonstrate that\nthis structure works well for tech startups, and give you a\npractical checklist you can apply.",
        "year": "2014",
        "month": "march"
      }
    ]
  },
  "Ismael Celis": {
    "name": "Ismael Celis",
    "links": [
      "http://home.ismaelcelis.com/"
    ],
    "talks": [
      {
        "title": "Building a SOA network of daemons with Go, Ruby and ZMQ",
        "coverage": "{::coverage year=\"2014\" month=\"march\" talk=\"building-a-soa-network-of-daemons-with-go-ruby-and-zmq\" /}",
        "summary": "I would like to talk about a series of custom-made infrastructure\ncomponents that I’ve built over several months to support a hosted\ne-commerce app that I run in my spare time.\nThis consists of a central events hub written in Go, to which the\nuser-facing apps send events, and a series of Go and Ruby scripts\nsubscribing to said events on a ZMQ socket and doing varied things\nsuch as analytics, periodical backups and house-keeping.\nThe code I’ll show is mostly Go, with some Ruby to illustrate how\nthis all hooks in to my Ruby apps and existing infrastructure. I’ll\ntry to show why Go is great for writing small, focused scripts that\nsupport your user facing apps.",
        "year": "2014",
        "month": "march"
      }
    ]
  },
  "Mal Pinder": {
    "name": "Mal Pinder",
    "links": [
      "https://twitter.com/malpinder"
    ],
    "talks": [
      {
        "title": "Patterns & Antipatterns in Teaching",
        "coverage": "{::coverage year=\"2014\" month=\"june\" talk=\"patterns-antipatterns-in-teaching\" /}",
        "summary": "My talk will be about the techniques & approaches that\nworked (and didn't work) for us while I was teaching at\n[Codecraft](http://tech.fundingcircle.com/codecraft/).",
        "year": "2014",
        "month": "june"
      }
    ]
  },
  "Najaf Ali": {
    "name": "Najaf Ali",
    "links": [
      "http://happybearsoftware.com/",
      "http://najafali.com/",
      "http://happybearsoftware.com"
    ],
    "talks": [
      {
        "title": "Adventures with data structures and algorithms",
        "coverage": "{::coverage year=\"2014\" month=\"june\" talk=\"adventures-with-data-structures-and-algorithms\" /}",
        "summary": "Hola amigos! We need to have a chat about data structures\nand algorithms. I've been messing around with them on-and-off\nover the past few years and I believe you'll find spending\nmore time learning them valuable. Here's what I'm going to\ntalk about:\n* Why you should bother learning about them at all, especially if you think you won't use them at work.\n* Some fun examples of data structures/algos you've heard of (and probably some you haven't) and how they're put to work in software you use every day.\n* Ways of learning them that I've found to be fun and effective.\nI swear in the name of [Knuth](https://en.wikipedia.org/wiki/Donald_Knuth) that there shall be no mention of\nbig-o notation or sorting algorithms. Also, I will attempt a\nlive demo of one of the algos using the SATR transport\nprotocol. It probably won't work if you are good at the maths\nand feeling mischievous.\n*[SATR]: Shout Across The Room",
        "year": "2014",
        "month": "june"
      },
      {
        "title": "From a raw TCP socket to a Rails application",
        "coverage": "{::coverage year=\"2013\" month=\"december\" talk=\"from-a-raw-tcp-socket-to-a-rails-application\" /}",
        "summary": "Ruby and associated frameworks are notorious for employing\nmagic in the name of developer productivity, especially when\nbuilding web applications. In this talk I'm going to peel\nback the layers of voodoo and show you how we go from a raw\nTCP socket to a Rails app via rack applications and middleware.\nWe'll be coving:\n* Very high level overview of TCP connections and a minimum\n  viable web server with netcat\n* Rack applications, middleware, and how they're typically chained\n  together\n* How Rails chains together rack middleware to do what it does\n  (i.e. tracing the code path of a request from class Railtie all\n  the way down to your apps controllers).\nThere will be live coding, so I request that you sacrifice a\nllama or three in the name of the demo gods before the event.",
        "year": "2013",
        "month": "december"
      },
      {
        "title": "Better security for your web applications",
        "coverage": "{::coverage year=\"2013\" month=\"april\" talk=\"better-security-for-your-web-applications\" /}",
        "summary": "He'll be covering:\n* How to improve the quality of your software by thinking like an attacker.\n* Technical walkthroughs of real-life vulnerabilities.\n* Practical tips for keeping your software secure over the long term.",
        "year": "2013",
        "month": "april"
      }
    ]
  },
  "John Maxwell": {
    "name": "John Maxwell",
    "links": [
      "http://jgwmaxwell.com/"
    ],
    "talks": [
      {
        "title": "Continuous Deliverance - set your development free",
        "coverage": "{::coverage year=\"2014\" month=\"july\" talk=\"continuous-deliverance-set-your-development-free\" /}",
        "summary": "The first principle of the Agile Manifesto says “Our highest\npriority is to satisfy the customer through early and\ncontinuous delivery of valuable software”, yet too often this\nis not the reality. Delivery is one of the most disruptive\nparts of the software development process for developers, but\ncan be easy to automate, empowering the iterative process.\nThis talk is a manifesto for how to go from scratch to\nautomated deployment, with a few tales from the trenches of\nmistakes made along the way.",
        "year": "2014",
        "month": "july"
      }
    ]
  },
  "Rosa Fox": {
    "name": "Rosa Fox",
    "links": [
      "http://www.techfox.co.uk/"
    ],
    "talks": [
      {
        "title": "Becoming a Developer & Codebar",
        "coverage": "{::coverage year=\"2014\" month=\"july\" talk=\"becoming-a-developer-codebar\" /}",
        "summary": "A short talk about my experience starting out as a professional\ndeveloper. The focus of this talk will be about a weekly event\nthrough which I received a huge amount of support called [Codebar](http://codebar.io).\nAt Codebar programming skills are taught for free to people\nunderrepresented in the tech industry.",
        "year": "2014",
        "month": "july"
      }
    ]
  },
  "Javier Ramirez": {
    "name": "Javier Ramirez",
    "links": [
      "http://javier-ramirez.com/"
    ],
    "talks": [
      {
        "title": "API Analytics with Redis and Bigquery",
        "coverage": "{::coverage year=\"2014\" month=\"january\" talk=\"api-analytics-with-redis-and-bigquery\" /}",
        "summary": "At [teowaki](https://teowaki.com/) we have a system for API usage analytics,\nwith [Redis](http://redis.io/) as a fast intermediate store and\n[bigquery](https://developers.google.com/bigquery/) as a big data\nbackend. As a result, we can launch aggregated queries on our\ntraffic/usage data in just a few seconds and we can try and find\nfor usage patterns that wouldn’t be obvious otherwise.\nIn this session I will talk about how we entered the Big Data\nworld, which alternatives we evaluated, and how we are using\nRedis and Bigquery to solve our problem.",
        "year": "2014",
        "month": "january"
      }
    ]
  },
  "Julien Letessier": {
    "name": "Julien Letessier",
    "links": [
      "http://dec0de.me/"
    ],
    "talks": [
      {
        "title": "Using data tiering to squeeze scale out of SQL",
        "coverage": "{::coverage year=\"2014\" month=\"january\" talk=\"using-data-tiering-to-squeeze-scale-out-of-sql\" /}",
        "summary": "As traffic grows, some of the data structures our application\nhas to manipulate gets contended. Ours is an unusual, but\neffective solution: segregate data into read-mostly and\nwrite-mostly.",
        "year": "2014",
        "month": "january"
      }
    ]
  },
  "Dirk Breuer": {
    "name": "Dirk Breuer",
    "links": [
      "http://tfcl.de/"
    ],
    "talks": [
      {
        "title": "How to make Guacamole",
        "coverage": "{::coverage year=\"2014\" month=\"august\" talk=\"how-to-make-guacamole\" /}",
        "summary": "[ArangoDB](https://www.arangodb.org/) is a multi-purpose NoSQL database. There are a lot\nof features in it but without a proper high level library\nfor common web frameworks no one will use a database these\ndays. No matter how fancy it is. [Guacamole](http://guacamolegem.org/) is an ODM for\nArangoDB to be used in Rack-based framework and especially\nRails. I will talk about the design choices, caveats and my\nthe general experience working on that kind of library. The\ntalk will not go too deep into technical details and should\nbe interesting to novice and experts alike.",
        "year": "2014",
        "month": "august"
      }
    ]
  },
  "Alex Speller": {
    "name": "Alex Speller",
    "links": [
      "http://alexspeller.com/"
    ],
    "talks": [
      {
        "title": "A gentle introduction to music theory (in ruby)",
        "coverage": "{::coverage year=\"2014\" month=\"august\" talk=\"a-gentle-introduction-to-music-theory-in-ruby\" /}",
        "summary": "Music theory can seem arcane and unapproachable. But underneath\nthe weird names and symbols, the basics are actually pretty\nsimple. The real issue is that the documentation is bad and the\nAPI is worse! In this talk I will show how to start with nothing\nbut a ruby interpreter, and generate sine waves, notes, scales,\nmodes, chords, arpeggios and songs, in a way that will be\nunderstandable to those who have never touched an instrument\nbefore and will (hopefully) offer an interesting new perspective\neven to those who are already well versed in music theory.",
        "year": "2014",
        "month": "august"
      }
    ]
  },
  "the ODI": {
    "name": "the ODI",
    "links": [
      "http://theodi.org/"
    ],
    "talks": [
      {
        "title": "Adventures in early-adoption of open-source code",
        "coverage": "{::coverage year=\"2014\" month=\"april\" talk=\"adventures-in-early-adoption-of-open-source-code\" /}",
        "summary": "Last year, the ODI found themselves wanting to use the\ncode behind [gov.uk](http://www.gov.uk) for a new project.\nIn this talk [James](https://theodi.org/team/james-smith)\nand [Sam](https://theodi.org/team/sam-pikesley) from the ODI\ntech team will share their experience of picking up a codebase\nwhich was [open source](https://github.com/alphagov), but never\nreally designed for reuse, and what they learned along the way.",
        "year": "2014",
        "month": "april"
      }
    ]
  },
  "Camille Baldock": {
    "name": "Camille Baldock",
    "links": [
      "http://camillebaldock.co.uk/"
    ],
    "talks": [
      {
        "title": "Aspect-Oriented Programming in Ruby",
        "coverage": "{::coverage year=\"2014\" month=\"april\" talk=\"aspect-oriented-programming-in-ruby\" /}",
        "summary": "Many of us developers love arguing about architecture that\nwe dislike and refactoring our code to loosen coupling and\nweaken dependencies between our objects. Unfortunately,\nsome overarching parts of our applications, like persistence,\nnetworking, notifications, logging, auditing, are scattered\nin our code, forcing us to specific explicit dependencies\nbetween them and our domain objects.\n[Aspect-oriented programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming)\nis a solution to the problem of some features affecting\nvirtually all business requirements, and expresses that problem\nin a compact and DRY way.\nIn this practical talk, Camille will:\n* introduce the basic concepts of AOP, and how it is still relevant even in a non-statically typed language like Ruby\n* show you how to easily and quickly leverage some AOP principles in your Rails application\n* play with some AOP-friendly constructs in Ruby 2, in particular TracePoint\n* walk you through two existing Ruby frameworks to practice Aspect-Oriented Programming\nShe will even attempt to prove that not all things coming from the Java world are necessarily bad.",
        "year": "2014",
        "month": "april"
      }
    ]
  },
  "Ragel": {
    "name": "Ragel",
    "links": [
      "http://www.complang.org/ragel/"
    ],
    "talks": [
      {
        "title": "Modelling state machines with Ragel",
        "coverage": "{::coverage year=\"2013\" month=\"october\" talk=\"modelling-state-machines-with-ragel\" /}",
        "summary": "Ragel is a State Machine Compiler, which can generate Ruby\ncode (as well as C, Java, Go, and more). It can be used for\nwriting robust protocol implementations, parsing data formats,\nand performing lexical analysis of programming languages. Ragel\nis used in many open source projects including [Gherkin](https://github.com/cucumber/gherkin/blob/master/ragel/lexer_common.rl.erb),\n[Thin](https://github.com/macournoyer/thin/blob/master/ext/thin_parser/parser.rl), [Min](https://github.com/macournoyer/min/blob/master/src/min/lang/Scanner.rl),\n[Mongrel](https://github.com/mongrel/mongrel/blob/master/ext/http11/http11_parser_common.rl), [Redcloth](https://github.com/jgarber/redcloth/tree/master/ragel),\n[Radiant](https://github.com/jlong/radius/blob/master/lib/radius/parser/JavaScanner.rl), and [Hpricot](https://github.com/hpricot/hpricot/blob/master/ext/hpricot_scan/hpricot_common.rl).\nTo demonstrate Ragel's capabilities we'll model [Vim](http://www.vim.org/), which is a\nFinite State Machine. We'll do so by parsing a stream of Vim\nkeystrokes, using Ragel state machines to manage the transitions\nbetween Vim's modes. We'll see how to generate state chart\nvisualisations with Ragel, and how these can be used to debug\nour state machines. The resulting program will enable us to\nanalyse and visualise the interactions of a Vim user.",
        "year": "2013",
        "month": "october"
      }
    ]
  },
  "Olly Legg": {
    "name": "Olly Legg",
    "links": [
      "http://www.51degrees.net/"
    ],
    "talks": [
      {
        "title": "Enumerators in Ruby",
        "coverage": "{::coverage year=\"2013\" month=\"october\" talk=\"enumerators-in-ruby\" /}",
        "summary": "[Enumerators](http://ruby-doc.org/core-2.0.0/Enumerator.html)\nare a little known class in the standard library.\nI'll discuss where they're used in stdlib, how you can\nimplement them and (at least) one practical example where\nthey might be the right solution.",
        "year": "2013",
        "month": "october"
      }
    ]
  },
  "Andrew Nesbitt": {
    "name": "Andrew Nesbitt",
    "links": [
      "http://nesbitt.io/",
      "http://teabass.com/"
    ],
    "talks": [
      {
        "title": "Controlling Robots with Ruby",
        "coverage": "{::coverage year=\"2013\" month=\"november\" talk=\"controlling-robots-with-ruby\" /}",
        "summary": "In the past few years robots have started to invade our lives, as\ntoys or tools for around the home or at work. These robots are\noften much more user friendly and more importantly, hackable, than\ntraditional industrial robots, which has lowered the barrier to\nwriting software to control robots.\nWe'll look at one particular ruby library, [Artoo](http://artoo.io/), a micro-framework\nfor robotics that lets you connect to multiple different hardware\ndevices and robots at the same time with some live demos as well.",
        "year": "2013",
        "month": "november"
      },
      {
        "title": "An introduction to Rubymotion: Writing iOS apps with Ruby",
        "coverage": "{::coverage year=\"2012\" month=\"november\" talk=\"an-introduction-to-rubymotion-writing-ios-apps-with-ruby\" /}",
        "summary": "[Rubymotion](http://www.rubymotion.com/) lets you write native iOS apps in Ruby, this talk\nexplores the toolkit and the community that has sprung up around it.",
        "year": "2012",
        "month": "november"
      }
    ]
  },
  "Dawid Skłodowski": {
    "name": "Dawid Skłodowski",
    "links": [
      "http://dawid.sklodowski.eu/"
    ],
    "talks": [
      {
        "title": "DCI with Ruby & Rails",
        "coverage": "{::coverage year=\"2013\" month=\"may\" talk=\"dci-with-ruby-rails\" /}",
        "summary": "Data Context Interaction is recently invented programming paradigm,\nwhich aims at separating behaviour from data model, by extracting\ninteractions into roles, which can be played by objects in various\ncontexts.\nThis presentation is going to give brief introduction to DCI,\npropose ways to implement roles' injection in Ruby and discuss\nhow DCI could be used to supplement Rails' MVC paradigm.",
        "year": "2013",
        "month": "may"
      }
    ]
  },
  "mruby": {
    "name": "mruby",
    "links": [
      "https://github.com/mruby/mruby"
    ],
    "talks": [
      {
        "title": "Come get dirty with mruby",
        "coverage": "{::coverage year=\"2013\" month=\"may\" talk=\"come-get-dirty-with-mruby\" /}",
        "summary": "While most of us know what mruby is, few of us have had a\nchance to kick the tires, poke around a bit and see what\nmakes it tick. In this ~30 minute workshop-presentation,\nwe will help each other to get mruby built locally, do a\nclassic \"Chunky bacon\" test, and have a go at writing our\nown rbgems to extend the language with custom functionality.\nBring your laptop, and get your hands dirty with mruby.",
        "year": "2013",
        "month": "may"
      }
    ]
  },
  "deliver": {
    "name": "deliver",
    "links": [
      "https://github.com/gerhard/deliver"
    ],
    "talks": [
      {
        "title": "deliver",
        "coverage": "{::coverage year=\"2013\" month=\"march\" talk=\"deliver\" /}",
        "summary": "I will be speaking about app deployment, good production\npractices, CI and CD and app versioning (never replace a\nworking production app instance with a new deploy).\n[deliver](https://github.com/gerhard/deliver) is a single\nutility to rule one's deploys to gh:pages, Jekyll, Ruby,\nnode.js etc, even legacy PHP code (we all have it). The\ntalk will also touch on S3-backed site deploys & Route53\nIP failover to that S3 site.",
        "year": "2013",
        "month": "march"
      }
    ]
  },
  "Pablo Brasero Moreno": {
    "name": "Pablo Brasero Moreno",
    "links": [
      "http://pablobm.com/"
    ],
    "talks": [
      {
        "title": "Passing on our skills to the next generation",
        "coverage": "{::coverage year=\"2013\" month=\"march\" talk=\"passing-on-our-skills-to-the-next-generation\" /}",
        "summary": "I will share my experience teaching programming to children\nfor a month. I will also tell us about \"code clubs\" in the\nUK, and what technologies exist to assist teachers in\nthis task.",
        "year": "2013",
        "month": "march"
      }
    ]
  },
  "JB Steadman": {
    "name": "JB Steadman",
    "links": [
      "https://twitter.com/jbsteadman"
    ],
    "talks": [
      {
        "title": "State Transitions Are People Too",
        "coverage": "{::coverage year=\"2013\" month=\"june\" talk=\"state-machines-are-people-too\" /}",
        "summary": "In this talk I present a simple ActiveRecord-based alternative\nto the many popular state machine gems.\nSuppose you're dealing with a school application system.\nApplications can be submitted, rejected, approved. Then\nyou would have\n``class Submission < StateTransition end``\nand so on. StateTransition is an STI subclass of\nActiveRecord::Base.\nInside each 'concrete' transition subclass, AR\nvalidations determine whether the transition can be\ncreated, given current system state. Callbacks make\nchanges to other models that result from the\ntransitions, as well as trigger other effects like emails.\nThis shifts emphasis from the models to the transitions\nthemselves. Model classes don't get cluttered with\nlogic related to multiple transitions - that logic\nlives in the transition classes. It works nicely\nwith REST. You are literally creating an Approval,\nrather than \"approving\". Logging of transitions is\nfront and center. Nobody has to learn a new lib and\nyou're never beholden to yesteryear's state machine\ngem-of-the-month.",
        "year": "2013",
        "month": "june"
      }
    ]
  },
  "Louis Goff-Beardsley": {
    "name": "Louis Goff-Beardsley",
    "links": [
      "https://twitter.com/LouisRoR"
    ],
    "talks": [
      {
        "title": "Building and maintaining a Ruby team during the Rails crisis of 2013",
        "coverage": "{::coverage year=\"2013\" month=\"july\" talk=\"building-and-maintaining-a-ruby-team-during-the-rails-crisis-of-2013\" /}",
        "summary": "1. There’s a massive shortage of Ruby developers.\n2. Over the last year I’ve worked with numerous teams\n   implementing creative, non-standard ways to building and\n   maintaining teams.\n3. I’m going to talk about them.\n4. This will be relevant to existing teams and people\n   thinking of starting a team in the future. Overall I think\n   it will be beneficial & interesting for everyone, even if\n   you’re not thinking of starting your own team any time soon.",
        "year": "2013",
        "month": "july"
      }
    ]
  },
  "DRUG": {
    "name": "DRUG",
    "links": [
      "http://drug.org.pl/"
    ],
    "talks": [
      {
        "title": "The solution to assets management in Rails",
        "coverage": "{::coverage year=\"2013\" month=\"december\" talk=\"the-solution-to-assets-management-in-rails\" /}",
        "summary": "As Ruby web developers we all know the pain of managing client\nside assets in (not only) Rails applications, especially in legacy\napplications. I have had enough and that's how [http://rails-assets.org](http://rails-assets.org)\nwas born. The main purpose of this talk, besides spreading the\nword, is to show some details of how rails-assets works and to\ncompare it with existing solutions",
        "year": "2013",
        "month": "december"
      }
    ]
  },
  "coder sumo": {
    "name": "coder sumo",
    "links": [
      "http://codersumo.com/"
    ],
    "talks": [
      {
        "title": "A FizzBuzz to rule them all",
        "coverage": "{::coverage year=\"2013\" month=\"december\" talk=\"a-fizzbuzz-to-rule-them-all\" /}",
        "summary": "Do expressive programming languages influence how we approach a\nproblem? We'll look at a few things you can learn about software\ndevelopers after analysing 1500 FizzBuzz implementations.",
        "year": "2013",
        "month": "december"
      }
    ]
  },
  "Pete Hamilton": {
    "name": "Pete Hamilton",
    "links": [
      "https://twitter.com/peterejhamilton"
    ],
    "talks": [
      {
        "title": "Rabbit running wild? You need a hutch!",
        "coverage": "{::coverage year=\"2013\" month=\"august\" talk=\"rabbit-running-wild-you-need-a-hutch\" /}",
        "summary": "When you're working in an architecture with multiple\nservices, there are a lot of available options for how to\ncommunicate between them. Which do you pick?\nI'll be talking about why [RabbitMQ](http://www.rabbitmq.com/) can be a great choice,\nhow and why we're using it here at [GoCardless](https://gocardless.com/) and covering\nsome of the ways we've simplified using RabbitMQ's\n[Topic Exchange](http://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-topic) in a ruby environment with 'Hutch'.\nI'll then talk about some of the issues we encountered\naround scaling and setting up multiple rabbit nodes as a\ncluster, highlighting some of the potential failure points\nand edge cases this brings with it and a tools we built to\nmake sure we had them covered.",
        "year": "2013",
        "month": "august"
      }
    ]
  },
  "Padrino": {
    "name": "Padrino",
    "links": [
      "http://www.padrinorb.com/"
    ],
    "talks": [
      {
        "title": "Say hello to Padrino",
        "coverage": "{::coverage year=\"2013\" month=\"april\" talk=\"say-hello-to-padrino\" /}",
        "summary": "Rails showed us the power of the full-stack framework.\nIt was good, but some of us felt the power was at the\nexpense of lightness (and joy?).\nSinatra showed us the joy of simple. The bare essentials\nto start working with http requests gave us back some\nof the Zen of creating a codebase that did exactly what\nit should and nothing more. Sadly, this Zen meant\nreinventing wheels that Rails had already rolled.\nPadrino came after both of these projects and the\ndevelopers learnt from them. They re-imagined the\nfull stack using Sinatra as a base and building from\nthere. Sinatra++ you might think.",
        "year": "2013",
        "month": "april"
      }
    ]
  },
  "Ian Kynnersley": {
    "name": "Ian Kynnersley",
    "links": [
      "http://iankynnersley.co.uk/"
    ],
    "talks": [
      {
        "title": "Doing less and keeping it simple",
        "coverage": "{::coverage year=\"2012\" month=\"september\" talk=\"doing-less-and-keeping-it-simple\" /}",
        "summary": "What do we mean when we talk about simplicity? Why is it important and why is\nit so hard to achieve?",
        "year": "2012",
        "month": "september"
      }
    ]
  },
  "Chris O'Sullivan": {
    "name": "Chris O'Sullivan",
    "links": [
      "http://www.thechrisoshow.com/"
    ],
    "talks": [
      {
        "title": "Objective C for Rubyists",
        "coverage": "{::coverage year=\"2012\" month=\"september\" talk=\"objective-c-for-rubyists\" /}",
        "summary": "There are so many things we take for granted writing Ruby code -\ninitialising hashes and arrays, doing basic arithmetic with floats and\nintegers, using subscript accessors for containers.  Trying to do\nthese basic things in Objective C requires writing screeds of\nboilerplate code.\nWell, it's time to have another look at Objective C.\nThe latest version of the compiler includes some wonderful shortcuts\nto make your code more concise, readable, and a lot more like Ruby. In\nthis talk I'll give you a whirlwind tour of these changes.",
        "year": "2012",
        "month": "september"
      }
    ]
  },
  "John Leach": {
    "name": "John Leach",
    "links": [
      "http://johnleach.co.uk/"
    ],
    "talks": [
      {
        "title": "Beautiful command-line interface design",
        "coverage": "{::coverage year=\"2012\" month=\"october\" talk=\"beautiful-command-line-interface-design\" /}",
        "summary": "A lot of importance is placed on good GUI design but it’s easy to\noverlook good command line interfaces.\nTaking from our experiences writing the Brightbox Cloud cli (and years\nof using cli tools, both good and bad), this talk will show you some of\nthings you need to consider when designing a good cli interface (with a\nfocus on Ruby!).\nAnd all this without turning to ncurses!",
        "year": "2012",
        "month": "october"
      }
    ]
  },
  "Khash Sajadi": {
    "name": "Khash Sajadi",
    "links": [
      "http://sajadi.co.uk/dflat/"
    ],
    "talks": [
      {
        "title": "Background processing in Ruby (and Rails)",
        "coverage": "{::coverage year=\"2012\" month=\"november\" talk=\"background-processing-in-ruby-and-rails\" /}",
        "summary": "This is an introduction to scalable background processing in Ruby\n(and Rails) applications. It discusses best practises on task\nmanagement, managing and scaling long running processes in apps\nand overviews different solutions from high end of [Delayed Job](https://github.com/collectiveidea/delayed_job)\nto more detailed ones like [Event Machine](http://rubyeventmachine.com/).",
        "year": "2012",
        "month": "november"
      }
    ]
  },
  "EuRuKo 2012": {
    "name": "EuRuKo 2012",
    "links": [
      "http://www.euruko2012.org/"
    ],
    "talks": [
      {
        "title": "Ruby's bin men: a closer look at the garbage collector",
        "coverage": "{::coverage year=\"2012\" month=\"may\" talk=\"ruby-s-bin-men-a-closer-look-at-the-garbage-collector\" /}",
        "summary": "The Garbage Collector: how does it work?\nWhat does it mean when people speak about stop-the-world,\nmark-and-sweep, generational garbage collectors?\nHow does ruby fare at collecting its own garbage?\nWhat does it mean when they say 1.9.3's garbage collector has improved?\nThis talk will explain those concepts, what the impact of garbage\ncollection is on our programs, and what future could be.",
        "year": "2012",
        "month": "may"
      }
    ]
  },
  "Elasticsearch": {
    "name": "Elasticsearch",
    "links": [
      "http://www.elasticsearch.org/"
    ],
    "talks": [
      {
        "title": "Introduction to Elasticsearch",
        "coverage": "{::coverage year=\"2012\" month=\"june\" talk=\"introduction-to-elasticsearch\" /}",
        "summary": "Most apps need some form of search or filtering at some point\n(even if they don't need full text). [Elasticsearch](http://www.elasticsearch.org/) is a new(ish)\nsearch engine built on top of [Lucene](http://lucene.apache.org/) with some interesting features\nthat set it apart from other search engines such as sphinx or solr.\nI'll show what we've used elasticsearch for and why we picked it over\ncompeting solutions such as solr or sphinx.",
        "year": "2012",
        "month": "june"
      }
    ]
  },
  "Goruco": {
    "name": "Goruco",
    "links": [
      "http://goruco.com/"
    ],
    "talks": [
      {
        "title": "Hexagonal Rails",
        "coverage": "{::coverage year=\"2012\" month=\"june\" talk=\"hexagonal-rails\" /}",
        "summary": "The things that make Rails great in the first few weeks of a new project are\nprecisely what makes it hurt after a few months. Anyone who has worked on a\nmedium-sized Rails app will have experienced pain like:\n* High coupling, meaning you have to run all your tests all the time to check\n  each change.\n* Slow tests.\n* Logic littered in view templates or helper modules.\nChanges get more and more expensive to make, and the fun grinds to a halt.\nHow can you stop this from happening? And more importantly, how can you turn\naround a project that’s already hit this wall of pain?\nYou need to pull your app away from Rails.\nIn this practical talk, we describe [an architecture](http://c2.com/cgi/wiki?PortsAndAdaptersArchitecture) for mature Rails\napplications where the framework becomes a [plug-in](http://confreaks.com/videos/759-rubymidwest2011-keynote-architecture-the-lost-years) to your application.\nWith hands-on demonstrations, you’ll learn how to define clear boundaries\nbetween your application’s domain and Rails’ domain. Now Rails can stick\nto doing what it does best – providing the persistence and HTTP stack –\nand your valuable business logic will be in [plain old](http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design) [Ruby objects](http://devblog.avdi.org/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/) that\nare [fast](http://arrrrcamp.be/videos/2011/corey-haines---fast-rails-tests/) to [test](https://www.destroyallsoftware.com/screencasts/catalog/fast-tests-with-and-without-rails) and easy to reason about.",
        "year": "2012",
        "month": "june"
      }
    ]
  },
  "Sam Phillips": {
    "name": "Sam Phillips",
    "links": [
      "http://samsworldofno.com/"
    ],
    "talks": [
      {
        "title": "Happier deployments through gradual feature rollout",
        "coverage": "{::coverage year=\"2012\" month=\"july\" talk=\"happier-deployments-through-gradual-feature-rollout\" /}",
        "summary": "Releasing a big change to an application, whether a large overhaul of\nthe UX, system migration or upgrade to the internals, can be daunting.\nWill the change work technically? Will it make your users happy and\nimprove the desired metrics? This talk discusses strategies and\ntechnologies you can use to gradually roll changes out to gather early\nfeedback and prove your assumptions. It includes in-depth looks at\nsome technologies available (including the [rollout](https://github.com/jamesgolick/rollout) gem), as well as the\npart that gradual feature rollout has to play within your agile\nprocess.\nThese are all true stories, most of which I've been involved in. I'll\ncover experiences of products and projects of varying sizes, talk\nabout different solutions for different environments and, just to be\nfair, I include the humiliating (character-building) mistakes I've\nmade along the way.",
        "year": "2012",
        "month": "july"
      }
    ]
  },
  "J. Pablo Fernádez": {
    "name": "J. Pablo Fernádez",
    "links": [
      "http://pupeno.com/"
    ],
    "talks": [
      {
        "title": "What Ruby can't do",
        "coverage": "{::coverage year=\"2012\" month=\"july\" talk=\"what-ruby-can-t-do\" /}",
        "summary": "Ruby is an amazing language, it has an beautiful object model, a\nconcise syntax and it allows you to write functional code\nelegantly. It's probably one of the most powerful programming\nlanguages out there, yet, there are still some things it cannot\ndo. Let's explore those aspects because it'll open our minds to\nthink differently but most important, because it's fun!",
        "year": "2012",
        "month": "july"
      }
    ]
  },
  "Chris McGrath": {
    "name": "Chris McGrath",
    "links": [
      "https://twitter.com/chrismcg"
    ],
    "talks": [
      {
        "title": "Chris McGrath: I18n",
        "coverage": "{::coverage year=\"2012\" month=\"january\" talk=\"i18n\" /}",
        "summary": "The talk is about lessons learned localising a rails app into nine\ndifferent languages. It will cover:\n* Why we localised our app\n* Why you might want to use rails i18n even if you're only planning one language\n* A little bit about how the i18n gem works for those unfamiliar with it\n* Common problems you'll have and ways to work around them\nThe app we localised is [http://www.kyero.com](http://www.kyero.com/) and the\ntool we've built to help us and other ruby / rails devs using the i18n gem\nin [http://localeapp.com](http://localeapp.com/).",
        "year": "2012",
        "month": "january"
      }
    ]
  },
  "Joe Corcoran": {
    "name": "Joe Corcoran",
    "links": [
      "http://blog.joecorcoran.co.uk/"
    ],
    "talks": [
      {
        "title": "Joe Corcoran: Judge",
        "coverage": "{::coverage year=\"2012\" month=\"january\" talk=\"judge-client-side-form-validation-for-rails-3\" /}",
        "summary": "I'll talk about building [Judge](https://github.com/joecorcoran/judge), a client side form validation gem for\nRails 3.  I'll explain how I've tried to keep it lightweight and\nunassuming, why I ditched jQuery in favour of plain old JavaScript and\nwhat I learned about Rails i18n, form builders and HTML data\nattributes along the way.  I'll also give a brief introduction to\n[Travis](http://travis-ci.org/), the distributed build system that I've been using for\ncontinuous integration.",
        "year": "2012",
        "month": "january"
      }
    ]
  },
  "Frederick Cheung": {
    "name": "Frederick Cheung",
    "links": [
      "http://www.spacevatican.org/"
    ],
    "talks": [
      {
        "title": "Going Native",
        "coverage": "{::coverage year=\"2012\" month=\"december\" talk=\"going-native\" /}",
        "summary": "We all love ruby, but sometimes ruby is not enough. Whether it be a\nperformance bottleneck, a killer library written in C or some\nplatform specific functionality you just have to have, sometimes you\nneed to drop down a level.\nThere have been many talks that show how to take the first steps in\nwriting a ruby C extension. This isn't one of them. I propose\ninstead to give an overview of different ways of extending ruby and\nshow what each approach brings to the table. I intend to cover\n'classic' C extensions, RubyInline and FFI across a range of ruby\nimplementations.",
        "year": "2012",
        "month": "december"
      }
    ]
  },
  "Claudio Ortolina": {
    "name": "Claudio Ortolina",
    "links": [
      "http://claudio-ortolina.org/"
    ],
    "talks": [
      {
        "title": "Hermes, add wings to Ruby and Javascript development",
        "coverage": "{::coverage year=\"2012\" month=\"december\" talk=\"my-tests-run-faster-than-your-tests\" /}",
        "summary": "[Hermes](https://github.com/New-Bamboo/Hermes): A Vim/Tmux development environment to\neasily work with Ruby and Javascript.",
        "year": "2012",
        "month": "december"
      }
    ]
  },
  "rubygems": {
    "name": "rubygems",
    "links": [
      "http://rubygems.org/"
    ],
    "talks": [
      {
        "title": "Cut and Polish: Crafting Gems",
        "coverage": "{::coverage year=\"2012\" month=\"august\" talk=\"cut-and-polish-crafting-gems\" /}",
        "summary": "Gems underpin almost every piece of Ruby code we write – and so, being\nable to write your own gems is not only incredibly useful, it provides\nan avenue for code reuse and open source sharing. I'll be talking about\nthe ecosystem around gems and the fundamentals for writing your own gem\nfrom the ground up, plus some of the tools available to assist with\nthis, along with ideal approaches and best practices for gem\ndevelopment.",
        "year": "2012",
        "month": "august"
      }
    ]
  },
  "David Nolan": {
    "name": "David Nolan",
    "links": [
      "http://kapoq.com/"
    ],
    "talks": [
      {
        "title": "nil points: a talk about nothing, NULL, undefined, Maybe, and other ghosts in Ruby and beyond",
        "coverage": "{::coverage year=\"2012\" month=\"august\" talk=\"nil-points-a-talk-about-nothing-null-undefined-maybe-and-other-ghosts-in-ruby-and-beyond\" /}",
        "summary": "nil in Ruby is neat, simple, and convenient. But it's also problematic.\nIt infiltrates our code, silently, until boom! 'undefined method foo\nfor nil:NilClass' (or - true story, there's no time to explain -\nsuddenly thousands of Mark Zuckerbergs).\nIn this talk, I take a deep dive into nil, NULL, undefined, Maybe and\nother ghosts in Ruby and beyond. I want uncover important concepts that\nI think are obscured by by nil's convenience. And I think nil can be so\ncorrosive it's worth asking why we need it at all. Can we eliminate it\ncompletely? Can it be improved?\nSure, there are decent Ruby patterns and practices for living with nil,\nand I'll take a look at them. But I'll also try to illuminate nil by\nway of a vintage Soviet computer, Jainism, a billion dollars, a\nPeruvian tribe, and a Victorian wooden adding machine. And, since this\nis Ruby, there will some reckless live monkey-patching.",
        "year": "2012",
        "month": "august"
      }
    ]
  },
  "dRuby": {
    "name": "dRuby",
    "links": [
      "http://www.ruby-doc.org/stdlib-1.9.3/libdoc/drb/rdoc/DRb.html"
    ],
    "talks": [
      {
        "title": "Demystifying dRuby",
        "coverage": "{::coverage year=\"2012\" month=\"april\" talk=\"demystifying-druby\" /}",
        "summary": "dRuby stands for \"Distributed Ruby\" and it's one of less known Ruby\nstandard libraries.  It is one of the first use of Metaprogramming\nlong before Rails. dRuby creates proxy objects which lets you to\n\"automagically\"(In Matz's word) delegate method calls to remote objects.\nWhile I was translating [The dRuby Book: Distributed and Parallel Computing with Ruby](http://pragprog.com/book/sidruby/the-druby-book)\nfrom Japanese to English, I had a chance to work with [Masatoshi Seki](https://github.com/seki),\none of the Ruby core committers and has been using Ruby since\nversion 1.2. I learnt a lot of interesting Ruby technique from him\nand would like to share some of them with you.",
        "year": "2012",
        "month": "april"
      }
    ]
  },
  "Peter Vandenabeele": {
    "name": "Peter Vandenabeele",
    "links": [
      "http://vandenabeele.com/"
    ],
    "talks": [
      {
        "title": "Converting a Rails project from MRI to JRuby",
        "coverage": "{::coverage year=\"2012\" month=\"april\" talk=\"converting-a-rails-project-from-mri-to-jruby\" /}",
        "summary": "Starting from a scaffold Rails app with RSpec and mysql/postgresl\nwhat are the steps to get rspec to pass on JRuby:",
        "year": "2012",
        "month": "april"
      }
    ]
  },
  "Abdel": {
    "name": "Abdel",
    "links": [
      "http://twitter.com/abdels"
    ],
    "talks": [
      {
        "title": "My Adventures in Objective-C",
        "coverage": "{::coverage year=\"2011\" month=\"november\" talk=\"my-adventures-in-objective-c\" /}",
        "summary": "I have been ducking Objective-C at every turn for a very long time. Who wants to learn a heavily typed static behemoth just to write an iPhone app?!\nSo, I did what every self respecting programmer would do, throw alternative open solutions aka Javascript frameworks at the problem.\nBut in the end I had to succumb to the will of the Almighty Apple - I needed their Objective C to make stuff happen ... and it wasn't that bad :)\nThis is all the learning, similarities (of which there are a few) and differences between Objective-C and Ruby.",
        "year": "2011",
        "month": "november"
      }
    ]
  },
  "Andrew McDonough": {
    "name": "Andrew McDonough",
    "links": [
      "http://www.andrewmcdonough.com/"
    ],
    "talks": [
      {
        "title": "Andrew McDonough : Ruby Golf",
        "coverage": "{::coverage year=\"2011\" month=\"may\" talk=\"ruby-golf\" /}",
        "summary": "I started my career as a perl programmer.  Perl, like\nruby has a lot of 'syntactic sugar' to help developers write concise\ncode.  Perl programmers sometimes play a game known as '[Perl Golf](http://c2.com/cgi/wiki?PerlGolf)' to\nexplore the lesser-known features of the language.  The aim of 'perl\ngolf' is to solve a problem using the fewest characters possible.\nAt this month's meeting Andrew will run a practical evening based\naround 'ruby golf', an adaptation of perl golf for ruby developers.\nPeople will be asked to form teams of 4-8 people, and solve nine short\nruby golf 'holes' using as few characters as possible.  Each hole will\nbe defined by a set of [RSpec](http://rspec.info) examples describing a single method, and\nthe teams must write the method to pass all of the examples.  At the\nend, the solutions will be scored and the winning team will be\nannounced.\nThis evening should have something for everyone; beginners can pick up\nsome language tricks and learn how to write code to pass tests, while\nexperienced ruby developers will have the opportunity to show off\ntheir skills and compete with their peers.",
        "year": "2011",
        "month": "may"
      }
    ]
  },
  "Primer": {
    "name": "Primer",
    "links": [
      "https://github.com/jcoglan/primer"
    ],
    "talks": [
      {
        "title": "James Coglan: Primer",
        "coverage": "{::coverage year=\"2011\" month=\"march\" talk=\"primer\" /}",
        "summary": "It's no secret that expiring caches is hard. But it's also tedious, error-prone,\nand it forces a lot of duplication as your sweeper code is tightly coupled to\nhow your views work. And caching itself introduces complexity: by caching data,\nyou're creating multiple ways to compute the same value.\nWhat if we could get rid of all this? I'm going to take a look at Primer, a Rails\nextension I've been working on that means you'll never write another cache sweeper.\nWith a handful of mixins, you can keep writing your views the way you like and\nPrimer will deal with keeping them snappy. You'll see how you can use ActiveRecord's\nreflections to automate a lot of caching work, how to regenerate your views offline\nusing worker processes, and how to add real-time updates to your pages, all with\ncode you could write during your coffee break.",
        "year": "2011",
        "month": "march"
      }
    ]
  },
  "Chris Parsons": {
    "name": "Chris Parsons",
    "links": [
      "http://chrismdp.github.com/"
    ],
    "talks": [
      {
        "title": "Chris Parsons: Lessons learned BDD-ing a command-line utility gem",
        "coverage": "{::coverage year=\"2011\" month=\"march\" talk=\"lessons-learned-bdd-ing-a-command-line-utility-gem\" /}",
        "summary": "In this talk Chris will take us through how he test-drove the development of a\ncommand line utility built as a gem, designed to connect to servers\nvia SSH and HTTP. We'll discuss the use of [Aruba](https://github.com/aslakhellesoy/aruba) for command line\ntesting in cucumber, how to deal with external connections, and how to\ndiscover your service interfaces as you build the client.",
        "year": "2011",
        "month": "march"
      }
    ]
  },
  "December meeting": {
    "name": "December meeting",
    "links": [
      "/meetings/2010/12/01/december-2010-meeting/"
    ],
    "talks": [
      {
        "title": "Sean O'Halpin - Processing Tweets at the BBC",
        "coverage": "{::coverage year=\"2011\" month=\"january\" talk=\"processing-tweets-at-the-bbc\" /}",
        "summary": "I'll be talking about how we're using Ruby to process tweets in\nrealtime to discover inbound links to the [BBC Zeitgeist](http://zeitgeist.prototyping.bbc.co.uk/zeitgeist)\nand how we're reading the [Twitter Firehose](http://dev.twitter.com/pages/streaming_api) (about 1000 tweets/sec =\nabout 90 million a day) and storing the data in Amazon S3.\nThere'll be a bit about [Hadoop](http://hadoop.apache.org/) and [Map/Reduce](http://en.wikipedia.org/wiki/Map_reduce) too.",
        "year": "2011",
        "month": "january"
      }
    ]
  },
  "devopsweekly mailing list": {
    "name": "devopsweekly mailing list",
    "links": [
      "http://devopsweekly.com/"
    ],
    "talks": [
      {
        "title": "Chef and Vagrant",
        "coverage": "{::coverage year=\"2011\" month=\"august\" talk=\"vagrant-and-chef\" /}",
        "summary": "Most developers spend far too much time managing a development\nenvironment that is different to the one they use for production\napplications. Different tools, different underlying libraries and\ndifferent bugs. Local virtualisation provides an answer, but\nhistorically it's been time consuming and annoying to setup and\nmanage. Using configuration management tools like [Chef](http://www.opscode.com/chef/) to set things\nup, and [Vagrant](http://vagrantup.com/) to easily manage the virtual machines\nfrom the command line provides modern developers the best of all\npossible worlds.",
        "year": "2011",
        "month": "august"
      }
    ]
  },
  "Scottish Ruby Conference": {
    "name": "Scottish Ruby Conference",
    "links": [
      "http://scottishrubyconference.com/"
    ],
    "talks": [
      {
        "title": "Ben Scofield: Building Cloud Castles",
        "coverage": "{::coverage year=\"2011\" month=\"april\" talk=\"building-cloud-castles\" /}",
        "summary": "A year ago, I was a committed VPS and dedicated-machine deployer. I thought the cloud\nimposed silly restrictions - how dare you take away my shell account! Whaddya mean I\ncan't save files locally?\nSince then, I've had some interesting experiences. I've worked on big cloud-deployed\nsystems, and certain large traditionally-deployed systems, and I've seen how a lot of\nthe decisions that you're ... encouraged to make when designing an app to run in the\ncloud. Most interestingly, I've discovered how those same decisions can make for a\nmuch better app regardless of where it'll end up. In this talk, I'll share those\narchitectural patterns with you, and show why they work. Hopefully, I'll convince all\nof you to build cloud castles -- even if you've got your foundation firmly on the\nground.",
        "year": "2011",
        "month": "april"
      }
    ]
  },
  "Elise Huard": {
    "name": "Elise Huard",
    "links": [
      "http://jabberwocky.eu/"
    ],
    "talks": [
      {
        "title": "Elise Huard: Ruby goes to hollywood",
        "coverage": "{::coverage year=\"2011\" month=\"april\" talk=\"ruby-goes-to-hollywood\" /}",
        "summary": "A brief overview of the state of concurrency in Ruby, concurrency models\nused in other languages, and why actors might be the way to go.",
        "year": "2011",
        "month": "april"
      }
    ]
  },
  "mailing list": {
    "name": "mailing list",
    "links": [
      "/mailing-list"
    ],
    "talks": [
      {
        "title": "\"My First Ruby\"",
        "coverage": "{::coverage year=\"2010\" month=\"june\" talk=\"my-first-ruby\" /}",
        "summary": "1. It's a mailing list with a web front-end.  The web stuff is pre-rails and I think it's interesting in terms of \"look how far we've come\".  Seriously, if you've never done web development without a higher-level framework like rails you'll be amazed.  (For anyone who's heard of it, it uses [NARF](http://sourceforge.net/projects/narf-lib/)).\n2. I can pretty much guarantee that my first ruby code is worse than your first ruby code.  So for any newbies in the room, it should come as welcome relief that even apparent old-hands like myself have written terrible code (and it truly is terrible code), made terrible design decisions, and done both without the safety net of TDD.  Of course, hopefully in the talk I'll point out why, if writing this again, I would use TDD.  At the end I hope this talk will make people feel less embarrassed about showing off code of their own at future events; I'll be setting a base-level of awfulness.\n3. This bit of software was written in a weekend and has been in \"production\" for  7 years 11 months (according to the date I filled in for \"when I first started using Ruby\" on my Working With Rails profile) and it's been remarkably stable and unchanged for those 7 years.  I've no real evidence for this, but it's a scientific fact that it's the longest running piece of ruby software in the world... wouldn't you like to see inside it?",
        "year": "2010",
        "month": "june"
      }
    ]
  },
  "Conferencia Rails": {
    "name": "Conferencia Rails",
    "links": [
      "http://app.conferenciarails.org/talks/58-unix-rediscovering-the-wheel"
    ],
    "talks": [
      {
        "title": "UNIX: Rediscovering the wheel",
        "coverage": "{::coverage year=\"2010\" month=\"june\" talk=\"unix-rediscovering-the-wheel\" /}",
        "summary": "\"Those who don't understand UNIX are condemned to reinvent it, poorly.\"\nWe in the Ruby Community seem to have a habit of re-inventing things. Sometimes this is for good reason, but in some cases we don't know we're even doing it! We're wasting valuable time that could be spent learning Erlang!\nUNIX-like operating systems have been around for decades and lots of problems have come and gone in that time. I'm going to talk about some of the tools available that can be used to solve common Ruby and Rails deployment and development problems.",
        "year": "2010",
        "month": "june"
      }
    ]
  }
}